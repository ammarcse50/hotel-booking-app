interface CustomImageComponentProps {
    src: string;
    alt: string;
    blurDataUrl?: string;
    width?: number;
    height?: number;
    className?: string;
    onClick: () => void;
    onMouseEnter?: () => void;
    onMouseLeave?: () => void;
    onLoad?: () => void;
    onError?: () => void;
    onLoadStart?:
    | ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void)
    | undefined;
    onAbort?:
    | ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void)
    | undefined;
    onScroll?:
    | ((event: React.SyntheticEvent<HTMLImageElement, Event>) => void)
    | undefined;
}

function CustomImageComponent(
    {
        src,
        alt,
        blurDataUrl,
        width,
        height,
        className,
        onClick,
        onMouseEnter,
        onMouseLeave,
        onLoad,
        onError,
        onLoadStart,
        onAbort,
        onScroll,

    }: CustomImageComponentProps
) {
    const [isLoading, setIsLoading] = useState(true);
    const [srcState, setSrcState] = useState(src);

    return (
        <div className={cn("flex justify-center items-center", className)} >
            <Image
                onClick={onClick}
                alt={alt}
                style={
                    {
                        transform: "translate3d(0, 0, 0)",
                        width: '100%',
                        height: 'auto',
                    }
                }
                className="brightness-90 group-hover:brightness-110 rounded-lg transition transform"
                onError={
                    () => {
                        setSrcState("/place-holder.webp")
                    }
                }
                blurDataURL={blurDataUrl}
                onMouseEnter={onMouseEnter}
                onMouseLeave={onMouseLeave}
                onLoad={onLoad}
                onLoadStart={onLoadStart}
                onScroll={onScroll}
                onAbort={onAbort}
                sizes="80vw"
                src={srcState}
                width={height}
                height={width}
                loading="lazy"
            />
        </div>
    )
}